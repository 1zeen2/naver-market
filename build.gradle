// naver-market/build.gradle (루트 프로젝트의 build.gradle)
// 이 파일은 모든 하위 프로젝트에 공통적으로 적용될 설정을 정의합니다.

plugins {
    // ✨ 루트 프로젝트 자체에도 Java 플러그인을 적용합니다.
    // 이렇게 해야 STS가 루트 프로젝트를 Java 프로젝트로 인식하고 .classpath 파일을 생성합니다.
    id 'java'
    // Spring Boot 플러그인은 각 Spring Boot 서브프로젝트에 적용됩니다.
    id 'org.springframework.boot' version '3.4.3' apply false // 현재 사용 중인 Spring Boot 버전
    // Spring Dependency Management 플러그인은 Spring Boot 의존성 관리를 용이하게 합니다.
    id 'io.spring.dependency-management' version '1.1.7' apply false // 현재 사용 중인 버전
}

// 모든 서브프로젝트에 공통 설정을 적용합니다.
subprojects {
    // 서브프로젝트에도 Java 플러그인을 적용합니다.
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group = 'dev.seo'
    version = '0.0.1-SNAPSHOT'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17) // 사용 중인 Java 버전
        }
    }

    repositories {
        mavenCentral() // Maven Central 저장소 사용
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        // Lombok은 모든 Spring Boot 프로젝트에서 공통적으로 사용됩니다.
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // 테스트 관련 의존성도 공통적으로 정의할 수 있습니다.
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    // ✨ 매우 중요: '-parameters' 컴파일러 플래그를 모든 Java 컴파일 작업에 적용합니다.
    // 이 설정은 메서드 파라미터 이름을 .class 파일에 포함시켜 Spring이 리플렉션을 통해
    // @RequestParam, @PathVariable 등을 올바르게 인식하도록 합니다.
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters"
    }
}
